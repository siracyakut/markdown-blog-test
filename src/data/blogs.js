// tayfun.net - Blog'dan test amacıyla alınmıştır.

const BLOGS = [
  {
    blog_id: "31",
    blog_title: "YouTube Hile Yapıyor!",
    blog_slug: "youtue-hile-yapiyor",
    blog_content:
      "Beni tanıyanlar bilir, uzun süredir YouTube'a içerik üretiyorum, uzun derken gerçekten uzun.. Yaklaşık 12 yıldır.\r\n\r\nAncak, içerikleri herkes beğense de 100.000 aboneye ulaşmak benim için hayal gibi bir şeydi. Çünkü video çok izlense bile abone olma konusunda ya izleyenler kararsızdı ya da kanalı keşfetme konusunda yetersizlerdi. Ya da sorun benim içeriklerimdeydi, ancak böyle olsa olumsuz yorumlarla bunu anlardım diye düşünüyorum.\r\n\r\nKullanıcı tarafından bakınca, abone olduğun kanalın videolarını bile doğru düzgün önermeyen YouTube'un algoritmasını düşünürsek, bence çokta haksız değiller. Eskiden bu algoritma çok daha doğru şekilde çalışırken, şimdi YouTube göstermek istediklerini gösteriyor, bu da bir içerik üretici olarak benim canımı sıkıyor. Muhtemelen farketmeden bir çok kez YouTube yönlendirmesi ile bir video'dan bambaşka bir konuya geçmiş olabilirsiniz. İşte bunu yapan YouTube'un algoritması ve bu hiçte iyi bir şey değil..\r\n\r\nSon 2 aydır, YouTube'un doğrudan YouTube Studio üzerinden reklam verilmesini sağlayan bir beta özelliğini kullanmaya başladım, bildiğin parasıyla video reklamı yapabiliyorsunuz, bunu zaten yapıyorduk ama süreç benim için karmaşıktı hiç yapmamıştım, şimdi panelden birkaç basit adımla yapılabilir olduğu için denemek istedim. Meğer benim kanalımı takip etmek isteyen, videoları sevebilecek günlük yüzlerce insan potansiyeli varmış ama işe bakın ki YouTube bunu sadece parayla reklam verdiğim zaman yapıyor :) Normalde günlük 25-50 kişi kanalı keşfederken, şu an reklamlar sayesinde günlük 250-300 abone geliyor.\r\n\r\nBuda bana, aslında bir kitlenin olduğunu ancak YouTube'un algoritması gereği onlara bir şekilde önermediğini anlatıyor. Yani anlayacağınız, yine parası olan bunu yapabilirken gerçekten emeğiyle kaliteli içerikler üretenler boşa düşüyor. Bu yüzden YouTube boş bir cehennem olma yolunda gitsede, hala emeğiyle içerik üretenler olduğu sürece onları takip etmeye devam edeceğim. Büyük kanallardan ziyade ben öğrendiğim niş bilgilerin hepsini küçük ya da hiç duyulmamış kanallardan öğrendim, bunu size de tavsiye ederim.",
    blog_active: "1",
    blog_category: ["youtube"],
    blog_date: "2023-07-11 05:36:32",
    blog_hit: "0",
    blog_user_id: "1",
  },
  {
    blog_id: "30",
    blog_title: "CRA Uygulamarınızı Vite'e Geçirin!",
    blog_slug: "cra-uygulamarinizi-vite-e-gecirin",
    blog_content:
      'React\'in sitesinin arayüz güncellemesi sonrasında, react projesi oluşturmak için önerilen CRA artık önerilmemektedir.\r\n\r\nEğer nextjs gibi full-stack frameworkleri de kullanmak istemiyorsanız, en mantıklı çözüm Vite ile react projeleri oluşturmaktır.\r\n\r\nYeni oluşturacağınız projeler için sorun yok, zaten nasıl oluşturulacağı belli.\r\n\r\n```\r\nnpm create vite\r\n# ya da\r\nyarn create vite\r\n# ya da \r\npnpm create vite\r\n```\r\n\r\nancak artık varolan CRA projelerinizi de Vite\'e geçirmek isteyebilirsiniz. Varolan projelerinizi Vite\'e geçirirken dikkat etmeniz gereken şeyler aşağıda listelenmiştir.\r\n\r\n- JSX kodu olan bütün dosyalarınızın uzantısı `.jsx` olmalı. Yani CRA projenizde `.js` uzantılı içinde JSX kullandığınız bütün dosyaların adlarını `.jsx` e çevirmelisiniz.\r\n- `.env` dosyasından okuduğunuz ortam değişkenleri CRA projenizde `process.env.REACT_APP_` ile başlarken vite projesinde `import.meta.VITE_` şeklinde başlıyor. Bu yüzden ortam değişkenlerini buna göre değiştirmeniz gerekiyor.\r\n- CRA\'da absolute path kullanıyorsanız, `import Button from "../../components/button"` yerine `import Button from "components/button"` gibi bir import işlemi yapıyorsunuzdur. Vite\'de bunu ayarlamak için `vite-jsconfig-paths` paketine ihtiyacınız olacak.\r\n\r\n##### Adım 1\r\n\r\nİlk olarak Vite projenizi yukarıdaki gibi kurun. Ve CRA projenizdeki `public/index.html` de yaptığınız bir değişiklik varsa Vite projenizde ana dizinde bulunan `index.html` içinde düzenleyin.\r\n\r\n##### Adım 2\r\n\r\nCRA projenizde `public/` içinde bulunan public dosyalarınızı Vite projenizde yine aynı dizin içine taşıyın.\r\n\r\n##### Adım 3\r\n\r\nCRA projenizde `src/index.js` dosyanızdaki kodlarınızı Vite projenizdeki `src/main.jsx` içine taşıyın.\r\n\r\n##### Adım 4\r\n\r\nCRA projenizde `package.json` içindeki `dependencies` ve `devDependencies` paketlerinizi Vite projenizde yine aynı dosya içine ekleyin. Eklerken vite projenizin package.json dosyaındaki paketlerini ezmediğinizden emin olun.\r\n\r\n##### Adım 5\r\n\r\nCRA projenizde `src` içinde JSX kodu geçen tüm dosyalarınızın uzantısını `.jsx` e dönüştürmeniz gerekiyor. Bunun için tek tek yapmak yerine, aşağıda verdiğim nodejs betiğini projenin ana dizininde `changeJsxExtensions.js` adıyla oluşturun ve içine şunları ekleyin:\r\n\r\n```js\r\nconst fs = require(\'fs\');\r\nconst path = require(\'path\');\r\n\r\nconst directoryPath = path.join(__dirname, \'src\');\r\n\r\nfunction isJSX(fileContent) {\r\n\tconst jsxElementRegex = /<[\\w\\s.:]+\\/?>/; // Basit JSX elementlerini kontrol etmek için düzenli ifade\r\n\tconst reactComponentRegex = /import.*from\\s+[\'"]react(-router-dom|-icomoon)?[\'"]/; // React, react-router-dom ve react-icomoon içe aktarımını kontrol etmek için düzenli ifade\r\n\tconst reactElementRegex = /<\\w+(\\s+\\w+(\\s*=\\s*{[^}]*}|"[^"]*"|\'[^\']*\'))*\\s*\\/?>/; // Karmaşık JSX elementlerini kontrol etmek için düzenli ifade\r\n\tconst capitalizedFunctionComponentRegex = /function\\s+[A-Z]\\w*\\s*\\(/; // Fonksiyon bileşeni için düzenli ifade\r\n\tconst capitalizedConstComponentRegex = /const\\s+[A-Z]\\w*\\s*=\\s*\\(/; // Const bileşeni için düzenli ifade\r\n\treturn (\r\n\t\treactComponentRegex.test(fileContent) ||\r\n\t\tjsxElementRegex.test(fileContent) ||\r\n\t\treactElementRegex.test(fileContent) ||\r\n\t\tcapitalizedFunctionComponentRegex.test(fileContent) ||\r\n\t\tcapitalizedConstComponentRegex.test(fileContent)\r\n\t);\r\n}\r\n\r\nfunction changeExtension(filePath) {\r\n\tconst newFilePath = filePath.replace(/\\.js$/, \'.jsx\');\r\n\tfs.rename(filePath, newFilePath, (err) => {\r\n\t\tif (err) throw err;\r\n\t\tconsole.log(`Renamed: ${filePath} -> ${newFilePath}\\n`);\r\n\t});\r\n}\r\n\r\nfunction processDirectory(directory) {\r\n\tfs.readdir(directory, (err, files) => {\r\n\t\tif (err) {\r\n\t\t\treturn console.log(\'Unable to scan directory:\', err);\r\n\t\t}\r\n\r\n\t\tfiles.forEach((file) => {\r\n\t\t\tconst filePath = path.join(directory, file);\r\n\r\n\t\t\tfs.stat(filePath, (err, stats) => {\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\tconsole.log(\'Error reading file:\', err);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (stats.isDirectory()) {\r\n\t\t\t\t\tprocessDirectory(filePath);\r\n\t\t\t\t} else if (stats.isFile() && path.extname(file) === \'.js\') {\r\n\t\t\t\t\tfs.readFile(filePath, \'utf8\', (err, data) => {\r\n\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\tconsole.log(\'Error reading file:\', err);\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (isJSX(data)) {\r\n\t\t\t\t\t\t\tchangeExtension(filePath);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n}\r\n\r\nprocessDirectory(directoryPath);\r\n```\r\n\r\ndaha sonra uzantı değişikliğini uygulamak için şu komutu çalıştırın:\r\n\r\n```\r\nnode changeJsxExtensions.js\r\n```\r\n\r\nBu betik `src` altında içinde JSX kodu geçen bütün dosyalarınızın uzantısını otomatik `.jsx` e çevirecektir.\r\n\r\n**Not:** Eğer javascript yerine typescript kullanıyorsanız betiğin içindeki `.jsx` değerini `.tsx` e çevirin.\r\n\r\n##### Adım 6\r\n\r\n`env` ortam değişkenlerini Vite\'e göre uyarlamak için `.env` dosyalarınızda `REACT_APP_` ifadelerini `VITE_` olarak değiştirin ve `src` altında kodlarda kullandıklarınızı otomatik değiştirmek için aşağıdaki nodejs betiğini ana dizine `replaceEnvVariables.js` adıyla oluşturup şunları ekleyin:\r\n\r\n```js\r\nconst fs = require("fs");\r\nconst path = require("path");\r\n\r\n// Değişiklik yapılacak olan dosya uzantıları\r\nconst fileExtensions = [".js", ".jsx"];\r\n\r\n// Analiz edilecek olan dizinler\r\nconst sourceDirectories = ["src"];\r\n\r\n// Dizinlerdeki tüm dosyaları listeleme\r\nfunction getFiles(dirPath, arrayOfFiles) {\r\n\tfiles = fs.readdirSync(dirPath);\r\n\r\n\tarrayOfFiles = arrayOfFiles || [];\r\n\r\n\tfiles.forEach(function (file) {\r\n\t\tif (fs.statSync(dirPath + "/" + file).isDirectory()) {\r\n\t\t\tarrayOfFiles = getFiles(dirPath + "/" + file, arrayOfFiles);\r\n\t\t} else {\r\n\t\t\tarrayOfFiles.push(path.join(dirPath, "/", file));\r\n\t\t}\r\n\t});\r\n\r\n\treturn arrayOfFiles;\r\n}\r\n\r\n// process.env.REACT_APP_ değerlerini import.meta.env.VITE_ değerine döndüren fonksiyon\r\nfunction replaceEnvVariables(content) {\r\n\tconst regex = /process\\.env\\.REACT_APP_([a-zA-Z_]+)/g;\r\n\treturn content.replace(regex, "import.meta.env.VITE_$1");\r\n}\r\n\r\n// Tüm dosyaları gezerek işlem yapma\r\nfunction processFiles(files) {\r\n\tfiles.forEach((file) => {\r\n\t\tconst ext = path.extname(file);\r\n\r\n\t\t// Uzantısı `.js` veya `.jsx` ise işlem yap\r\n\t\tif (fileExtensions.includes(ext)) {\r\n\t\t\tfs.readFile(file, "utf8", function (err, data) {\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\tconsole.log(err);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst newContent = replaceEnvVariables(data);\r\n\t\t\t\t\tif (data !== newContent) {\r\n\t\t\t\t\t\tconsole.log(`Updated file: ${file}`);\r\n\t\t\t\t\t\tfs.writeFile(file, newContent, (err) => {\r\n\t\t\t\t\t\t\tif (err) throw err;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n}\r\n\r\n// Tüm dizinlerdeki dosyaları bul\r\nlet files = [];\r\nsourceDirectories.forEach((dir) => {\r\n\tfiles = [...files, ...getFiles(dir)];\r\n});\r\n\r\n// İşlem yap\r\nprocessFiles(files);\r\n```\r\n\r\nBetiği çalıştırmak için:\r\n\r\n```\r\nnode replaceEnvVariables.js\r\n```\r\n\r\nİşlem sonrasında `src` altındaki dosyalarınızı (`index.js`) hariç Vite projenizde `src` içine taşıyın.\r\n\r\n##### Adım 7\r\n\r\nVite projenizde path tanımlarını absolute path olarak kullanmak için devDependency olarak şu paketi kurun:\r\n\r\n```\r\nnpm i -D vite-jsconfig-paths\r\n# ya da\r\nyarn add -D vite-jsconfig-paths\r\n# ya da\r\npnpm add -D vite-jsconfig-paths\r\n```\r\n\r\nDaha sonra `vite.config.js` dosyanızı açın ve şöyle düzenleyin:\r\n\r\n```js\r\nimport { defineConfig } from \'vite\'\r\nimport react from \'@vitejs/plugin-react\'\r\nimport jsconfigPaths from \'vite-jsconfig-paths\'\r\n\r\n// https://vitejs.dev/config/\r\nexport default defineConfig({\r\n  plugins: [react(), jsconfigPaths()],\r\n})\r\n```\r\n\r\n##### Sonuç\r\n\r\nCRA projenizde CSS işlemleri için ne kullanıyorsunuz bilemiyorum, ben tailwind kullandığım için, Vite projesine en başta tailwind\'i kuruyorum, ek bir ayar yapmama gerek kalmıyor.\r\n\r\nAncak sass, less gibi pre-processor\'ler kullanıyorsanız Vite için ayarlarını bir araştırmanızı öneririm.\r\n\r\nBunun dışında, artık Vite projenizi ayağa kaldırıp olası bir hata olup olmadığını kontrol ederek devam edebilirsiniz.\r\n\r\n**Not:** Eğer Vite\'de absolute path tanımı olarak `vite-jsconfig-paths` kullanmak yerine [şu makaledeki](https://prototurk.com/makaleler/vite-absolute-path) gibi bir tanım kullanıyorsanız, yani `import Button from "../../components/button"` yerine `import Button from "~/components/button"` şeklinde, o zaman aşağıdaki nodejs betiğini `updateImportPaths.js` adıyla oluşturup içine şunları ekleyin:\r\n\r\n```js\r\nconst fs = require("fs");\r\nconst path = require("path");\r\n\r\n// Değişiklik yapılacak olan dosya uzantıları\r\nconst fileExtensions = [".js", ".jsx"];\r\n\r\n// Analiz edilecek olan dizinler\r\nconst sourceDirectories = ["src"];\r\n\r\n// Yeni başlangıç karakteri\r\nconst newStartChar = "~/";\r\n\r\n// Paket isimleri\r\nconst packageNames = Object.keys(require("./package.json").dependencies);\r\n\r\n// Dizinlerdeki tüm dosyaları listeleme\r\nfunction getFiles(dirPath, arrayOfFiles) {\r\n\tfiles = fs.readdirSync(dirPath);\r\n\r\n\tarrayOfFiles = arrayOfFiles || [];\r\n\r\n\tfiles.forEach(function (file) {\r\n\t\tif (fs.statSync(dirPath + "/" + file).isDirectory()) {\r\n\t\t\tarrayOfFiles = getFiles(dirPath + "/" + file, arrayOfFiles);\r\n\t\t} else {\r\n\t\t\tarrayOfFiles.push(path.join(dirPath, "/", file));\r\n\t\t}\r\n\t});\r\n\r\n\treturn arrayOfFiles;\r\n}\r\n\r\n// Başlangıç karakterini güncelleme\r\nfunction replaceStartChar(content) {\r\n\tconst regex = /export\\s+(.*)\\s+from\\s+[\'|"]([^\'|"]*)[\'|"]|import\\s+(.*)\\s+from\\s+[\'|"]([^\'|"]*)[\'|"]/g;\r\n\treturn content.replace(regex, function (match, p1, p2, p3, p4) {\r\n\t\tlet importPath;\r\n\r\n\t\tif (p1 !== undefined && p2 !== undefined) {\r\n\t\t\timportPath = p2;\r\n\t\t} else {\r\n\t\t\timportPath = p4;\r\n\t\t}\r\n\r\n\t\t// Paket ismi veya paketin alt dizini ise dokunma\r\n\t\tconst isPackageOrSubPackage = packageNames.some((packageName) => {\r\n\t\t\treturn (\r\n\t\t\t\timportPath.startsWith(packageName) &&\r\n\t\t\t\t(importPath[packageName.length] === "/" ||\r\n\t\t\t\t\timportPath[packageName.length] === undefined)\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\tif (isPackageOrSubPackage) {\r\n\t\t\treturn match;\r\n\t\t}\r\n\r\n\t\t// Başına `~/` ekle\r\n\t\tif (importPath.startsWith(".") === false) {\r\n\t\t\treturn match.replace(importPath, `${newStartChar}${importPath}`);\r\n\t\t}\r\n\r\n\t\treturn match;\r\n\t});\r\n}\r\n\r\n// Tüm dosyaları gezerek işlem yapma\r\nfunction processFiles(files) {\r\n\tfiles.forEach((file) => {\r\n\t\tconst ext = path.extname(file);\r\n\r\n\t\t// Uzantısı `.js` veya `.jsx` ise işlem yap\r\n\t\tif (fileExtensions.includes(ext)) {\r\n\t\t\tfs.readFile(file, "utf8", function (err, data) {\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\tconsole.log(err);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst newContent = replaceStartChar(data);\r\n\t\t\t\t\tif (data !== newContent) {\r\n\t\t\t\t\t\tconsole.log(`Updated file: ${file}`);\r\n\t\t\t\t\t\tfs.writeFile(file, newContent, (err) => {\r\n\t\t\t\t\t\t\tif (err) throw err;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n}\r\n\r\n// Tüm dizinlerdeki dosyaları bul\r\nlet files = [];\r\nsourceDirectories.forEach((dir) => {\r\n\tfiles = [...files, ...getFiles(dir)];\r\n});\r\n\r\n// İşlem yap\r\nprocessFiles(files);\r\n```\r\n\r\nVe şu şekilde çalıştırın:\r\n\r\n```\r\nnode updateImportPaths.js\r\n```\r\n\r\nBu betik, CRA projelerinizdeki bütün absolute importlarınızın başına `~/` ekleyecektir. Elbette bunu yaparken paket import\'larını hariç tutacaktır.\r\n\r\n**Unutmayın:** Bütün bu işlemleri yaparken olası hataları önlemek için CRA projenizin mutlaka yedeğini alın ya da versiyon kontrol sistemlerini kullandığınızden emin olun ki bir hata olursa geriye dönebilin.',
    blog_active: "1",
    blog_category: ["cra", "vite", "react"],
    blog_date: "2023-04-13 23:06:06",
    blog_hit: "0",
    blog_user_id: "1",
  },
  {
    blog_id: "29",
    blog_title: "Vite Absolute Path",
    blog_slug: "vite-absolute-path",
    blog_content:
      "Son zamanlarda CRA yerine Vite ile React projelerimi geliştiriyorum. Hem daha hızlı hem de build sürecinde staging olayını ek bir ayar yapmadan kullanabiliyoruz bu da avantaj sağlıyor. CRA'da absolute path ile Vite'de kurulumlar biraz farklı.\r\n\r\nAbsolute Path ile kesin bir yol tanımı yapıp nerede olursak olalım bu kesin yol tanımını kullanarak dosyalarımızı çağırabiliyoruz. Yani şöyle import işlemlerini:\r\n\r\n```js\r\nimport Header from '../../components/Header'\r\nimport HeroSection from '../../components/HeroSection';\r\nimport { numberFormat } from '../../../helpers/Mixins';\r\n```\r\n\r\nNihayetinde şöyle kullanmak için:\r\n\r\n```js\r\nimport Header from '~/components/Header'\r\nimport HeroSection from '~/components/HeroSection';\r\nimport { numberFormat } from '~/helpers/Mixins';\r\n```\r\n\r\nŞu adımları takip edin:\r\n\r\nEğer typescript kullanıyorsan `tsconfig.json` javascript kullanıyorsanız `jsconfig.json` dosyasını ana dizinde oluşturun ve içine şunları yazın:\r\n\r\n```json\r\n{\r\n\t\"compilerOptions\": {\r\n\t    \"baseUrl\": \"./src\",\r\n\t    \"paths\": {\r\n\t      \"~/*\": [\"./*\"]\r\n\t    }\r\n\t}\r\n}\r\n```\r\n\r\nve `vite.config.ts` dosyanızı açıp şunu ekleyin:\r\n\r\n```js\r\nresolve: {\r\n    alias: {\r\n      '~': path.resolve(__dirname, 'src'),\r\n    },\r\n  },\r\n```\r\n\r\nEğer `path` bulamazsa en üstte şöyle import edin:\r\n\r\n```js\r\nimport * as path from \"path\"\r\n```\r\n\r\nVite'i yeniden başlatın, hazırsınız :)",
    blog_active: "1",
    blog_category: ["vite"],
    blog_date: "2023-02-07 21:50:56",
    blog_hit: "0",
    blog_user_id: "1",
  },
  {
    blog_id: "28",
    blog_title: "value vs. valueAsNumber",
    blog_slug: "value-vs-valueasnumber",
    blog_content:
      "Javascript'de input degerini almak icin `value` kullanılacağını herkes biliyor değil mi? Peki tipi `number` olan bir input'dan değer aldığımızda mantıken sayısal bir değer olduğu için tipinin number olan olmasını bekleriz ama `value` bize her zaman string verir, bu yüzden bunu `parseFloat()` ya da `parseInt()` gibi metodlarla çevirmemiz gerekir. Örneğin:\r\n\r\n```html\r\n<input type=\"number\">\r\n\r\n<script>\r\nconst input = document.querySelector('input')\r\n\r\ninput.addEventListener('input', e => {\r\n    console.log(e.target.value)\r\n    console.log(parseFloat(e.target.value))\r\n})\r\n</script>\r\n```\r\n\r\nAncak eğer tipi number olan bir input'ta değeri almaya çalışıyorsak `value` yerine kullanabileceğimiz `valueAsNumber` var. Bu şekilde, ekstra bir metod kullanmadan doğrudan tipi number olan bir değer alıyoruz. Yani:\r\n\r\n```html\r\n<input type=\"number\">\r\n\r\n<script>\r\nconst input = document.querySelector('input')\r\n\r\ninput.addEventListener('input', e => {\r\n    console.log(e.target.valueAsNumber)\r\n})\r\n</script>\r\n```\r\n\r\nTabi unutmayın, eğer değer boşsa `NaN` döndürecek, kontrolleri buna göre yaparak işlemlerinize devam edebilirsiniz, bazı javascript interview'larında bununla karşılaşabilirsiniz, uyanık olun :)\r\n\r\nAyrıca ufakta bir yaklaşım sunayım, değerine başına `+` operatörünü koymakta tipini number yapacaktır. Yani `e.target.value` yerine `+e.target.value` derseniz değeri `number` tipinde alabilirdiniz :)",
    blog_active: "1",
    blog_category: ["javascript"],
    blog_date: "2023-01-15 16:47:02",
    blog_hit: "0",
    blog_user_id: "1",
  },
  {
    blog_id: "27",
    blog_title: "JavaScript print Olayları",
    blog_slug: "javascript-print-olaylari",
    blog_content:
      "Daha önce print işlemleri ile ilgili [şöyle bir makale](/blog/print-icin-css) hazırlamıştım. O makale sadece CSS üzerineydi, ancak bunun vieosunu youtube'a çektiğimde print işlemleriyle ilgili javascript tarafında çok bir şey yok demiştim, yanılmışım. Print işleminin öncesinde ve sonrasına kod yazabileceğimiz 2 olay bulunuyormuş. Aşağıda bir örneğini bırakıyorum:\r\n\r\n```html\r\n<button onclick=\"window.print()\">Yazdır</button>\r\n\r\n<script>\r\nwindow.addEventListener('beforeprint', () => console.log('print isleminden once calisti'))\r\nwindow.addEventListener('afterprint', () => console.log('print isleminden sonra calisti'))\r\n</script>\r\n```\r\n\r\nEğer print etmeden önce bir işlem yaptırmak isterseniz javascript tarafında bu olayı dinleyerek yapabilirsiniz. Zaten css ile `@media print` sorgusu ile print işlemine özel css kodu yazabiliyorduk, eğer özel bir javascirpt ifadesi tanımlamak gerekirse mutlaka bu olaylar işinize yarayacaktır.",
    blog_active: "1",
    blog_category: ["javascript"],
    blog_date: "2023-01-15 15:27:04",
    blog_hit: "0",
    blog_user_id: "1",
  },
  {
    blog_id: "26",
    blog_title: "TailwindCSS :has() Kullanımı",
    blog_slug: "tailwindcss-has-kullanimi",
    blog_content:
      'Daha önce [şu yazımda](/blog/css-where-is-ve-has-sozde-siniflari) sizlere `:has()` sözde sınıfının kullanımını göstermiştim. Beni tanıyanlar bilir, neredeyse tailwind çıktığından beri tailwind ile geliştirme yapıyorum css tarafını. Ve tailwind tarafında `:has()` kullanımı içinse bir örnek göstereceğim:\r\n\r\nÖrneğin ilgili eleman içinde `p` etiketi varsa bir stil uygulamak için:\r\n\r\n```html\r\n<div class="p-8 [&:has(p)]:bg-red-500">\r\n  <p>Buraya yazı gelecek</p>\r\n</div>\r\n```\r\n\r\nYani kısaca kullanım `[&:has(...)]` nokta içine ne koyarsanız artık, :has() kullanım örneklerine bakarak örnekleri çoğaltabilirsiniz.',
    blog_active: "1",
    blog_category: ["tailwind"],
    blog_date: "2023-01-15 11:02:07",
    blog_hit: "0",
    blog_user_id: "1",
  },
  {
    blog_id: "25",
    blog_title: "30 yaşındayım",
    blog_slug: "30-yasindayim",
    blog_content:
      "Bugün benim doğum günüm, öyle süslü laflara gerek yok, 30 yaşına girdim. Hiç fena bir yaş değil, bakalım 30'lu yaşlar hayatımda nasıl değişikliklere yol açacak. 20'li yaşlarımda hayatımı dolu dolu yaşadım ama maddi konularda çok savurgan olduğum için hiçbir şeye sahip olamadım. Umarım 30'lu yaşlar beni biraz uslandırır ve hayatta bazı şeyler yoluna girmeye başlar :)\r\n\r\n![Ben ve yeğenlerim ecrin, eymen](https://raw.githubusercontent.com/tayfunerbilen/tayfun.net/main/images/4997855f-1826-448e-bc5d-5313a93d08c4.jpeg)",
    blog_active: "1",
    blog_category: ["hayat"],
    blog_date: "2023-01-13 07:34:17",
    blog_hit: "0",
    blog_user_id: "1",
  },
  {
    blog_id: "22",
    blog_title: "CSS :where(), :is() ve :has() Sözde Sınıfları",
    blog_slug: "css-where-is-ve-has-sozde-siniflari",
    blog_content:
      "## :where()\r\n\r\nBu arkadaşın içine birden fazla seçici ekleyebiliyoruz. Örneğin h1, h2 ve p etiketlerini seçelim:\r\n\r\n```css\r\n:where(h1, h2, p) {\r\n\tcolor: red\r\n}\r\n```\r\n\r\nama tabi bu kullanım yerine zaten virgül ile şöyle ayırıp seçebiliyoruz:\r\n\r\n```css\r\nh1, h2, p {\r\n\tcolor: red\r\n}\r\n```\r\n\r\nfakat eğer h1, h2 ve p etiketleri içindeki span etiketini seçmek isteseydik? İşte o zaman son örneğimiz şöyle uzayacaktı:\r\n\r\n```css\r\nh1 span,\r\nh2 span, \r\np span {\r\n\tcolor: red\r\n}\r\n```\r\n\r\nancak ilk örneğimiz harikalığını korumaya devam edecekti :D\r\n\r\n```css\r\n:where(h1, h2, p) span {\r\n\tcolor: red\r\n}\r\n```\r\n\r\nİşte bu yüzden gerçekten de sağlam bir özellik olmuş.\r\n\r\n## :is()\r\n\r\nBu arkadaşta `:where()` sözde sınıfını ile aynı. Öncelik dışında bir farkı yok, biliyorsunuz elemanları seçerken bazı öncelikler var. Eğer id ile seçtiysek onun stili uygulanıyor, düz etiket ile seçmek yerine sınıf ile seçersek o daha öncelikli oluyor vs. vs. bu da aynı mantıkta işliyor.\r\n\r\nancak buna da farklı bir örnek vermek gerekirse şöyle bir örnek verebilirdik. mesela input'un `:hover` ve `:focus` özellikleri aynı olursa ayrı ayrı şöyle yazmak gerekiyor:\r\n\r\n```cs\r\ninput:hover,\r\ninput:focus {\r\n\tborder-color: red\r\n}\r\n```\r\n\r\nböyle yazmak yerine şöyle kullanabilirdik:\r\n\r\n```css\r\ninput:is(:hover, :focus) {\r\n\tcolor: red\r\n}\r\n```\r\n\r\nçok daha temiz değil mi? bence de öyle :D\r\n\r\n## :has()\r\n\r\nbu ise durum kontrolü yapıyor. mesela seçilen elemanın içinde p etiketi var mı, seçilen elemana hover olundu mu, seçilen elemandan sonra şu eleman geliyor mu gibi gibi.\r\n\r\nÖrneğin `article` etiketleri içinde `h1` ve `h2` etiketi varsa `h1` etiketinin marginini düşürelim, yoksa daha yüksek yapalım demek istersek:\r\n\r\n```css\r\narticle h1 {\r\n    margin-bottom: 15px;\r\n}\r\narticle:has(h2) h1 {\r\n    margin-bottom: 5px;\r\n}\r\n```\r\n\r\nYa da `article` içindeki `input` etiketi `:invalid` ise `article` etiketinin rengini değiştirelim.\r\n\r\n```css\r\narticle:has(input:invalid) {\r\n    background: red;\r\n}\r\n```\r\n\r\nya da `article` etiketinden sonra `article`  geliyorsa margin-bottom vermeye devam edelim.\r\n\r\n```cs\r\narticle:has(+ article) {\r\n    margin-bottom: 100px;\r\n}\r\n```\r\n\r\nayrıca eğer `article` etiketinden sonra `article` ve `div` etketi geliyorsa bu işlemi yaptırmak isteseydim yukarıdaki özelliklerle birlikte şöyle kullanabilirdim:\r\n\r\n```css\r\narticle:has(+ :is(article, div)) {\r\n    margin-bottom: 100px;\r\n}\r\n```\r\n\r\nya da bir div icindeki a etiketine hover olduğuda diğer a etiketlerinin opacity değerini düşürelim.\r\n\r\n```css\r\ndiv:has(a:hover) {\r\n\topacity: .5\r\n}\r\ndiv a:hover {\r\n\topacity: 1\r\n}\r\n```\r\n\r\nörnekler çoğaltılabilir, biraz da keşfetmeyi size bırakıyorum :)",
    blog_active: "1",
    blog_category: ["css"],
    blog_date: "2023-01-06 10:44:34",
    blog_hit: "0",
    blog_user_id: "1",
  },
  {
    blog_id: "21",
    blog_title: "Sekmeler Arası Senkranizasyon (BroadcastChannel API)",
    blog_slug: "sekmeler-arasi-senkranizasyon-broadcastchannel-api",
    blog_content:
      "Aynı origine sahip sitelerde sekmeler arası uyumu sağlamanın önemli olduğunu düşünenlerdenim. Yani örneğin, prototurk.com'a girdiniz diyelim, bir makalesini başka bir sayfada açtınız. Sonra temasını değiştirip siteye giriş yaptınız, diğer sekmeye baktığınızda hala eski tema ve oturum açmamış görünüyor olursunuz. Yani değişiklikleri görmek için yenilemek gerekir sayfayı, bu da güzel bir ux deneyimi sunmuyor benim için.\r\n\r\nElbette verdiğim örnek prototurk.com üzerinde gerçekten yukarıdaki gibi işlem yaparsanız sekmeler arası senkranizasyon olduğunu fark edeceksiniz, çünkü bugün anlatacağım konuyu çoktan uyguladım :)\r\n\r\nBroadcastChannel API ile bir kanal'a bağlanıp o kanala mesaj gönderebildiğiniz gibi gelen mesajları da dinleyebiliyorsunuz.\r\n\r\nKanala bağlanmak için:\r\n\r\n```js\r\nconst broadcast = new BroadcastChannel('kanal_adi')\r\n```\r\n\r\nKanala mesaj göndermek için:\r\n\r\n```js\r\nbroadcast.postMessage('mesaj içeriği')\r\n```\r\n\r\nKanala gelen mesajları dinlemek için:\r\n\r\n```js\r\nbroadcast.addEventListener('message', event => {\r\n\tconsole.log(event.data) // mesaj içeriği\r\n})\r\n```\r\nBu bilgiler ışığında, bir örnekte yapalım. Farzedin ki, sitenizin koyu modu var. Ve bu koyu modu değiştirmek için bir buton var. \r\n\r\n```html\r\n<button onclick=\"clickHandle()\">Switch Theme</button>\r\n```\r\n\r\nVe `clickHandle()` metodunda aslında başka bir metod çağıracağız asıl işlevi yapan ve ek olarak kanala bir tema değişikliği olduğunu bildireceğiz. Aynı şekilde kanalı dinlediğimiz için tema değişikliği olduğunda aynı fonksiyonu tekrar çağıracağız. Böylece mesajı gönderen sekme hariç diğer sekmelerde bu komut çalışacak ve UI senkranizasyonu sağlanacak.\r\n\r\n```js\r\nconst broadcast = new BroadcastChannel('preferences')\r\n\r\nfunction clickHandle() {\r\n\tswitchTheme()\r\n\tbroadcast.postMessage('switch:theme')\r\n}\r\n\r\nfunction switchTheme() {\r\n\tdocument.body.classList.toggle('dark')\r\n}\r\n\r\nbroadcast.addEventListener('message', event => {\r\n\tswitch(event.data) {\r\n\t\tcase 'switch:theme': \r\n\t\t\tswitchTheme()\r\n\t\t\tbreak\r\n\t\tdefault:\r\n\t\t\tconsole.log(event.data)\r\n\t}\r\n})\r\n```\r\n\r\nSonuç ise aşağıdaki gibi harika olurdu :)\r\n\r\n![](https://raw.githubusercontent.com/tayfunerbilen/tayfun.net/main/images/dark.gif)",
    blog_active: "1",
    blog_category: ["javascript", "ui"],
    blog_date: "2023-01-05 08:14:43",
    blog_hit: "0",
    blog_user_id: "1",
  },
  {
    blog_id: "20",
    blog_title: "Print için CSS",
    blog_slug: "print-icin-css",
    blog_content:
      'ERP yazılımı yaparken print işlemleri için bazı özel css kodları yazmam gerekiyordu. Belki biliyorsunuzdur ama print işlemleri için özel css yazmak isterseniz şu sorgunun içinde yazabiliyorsunuz:\r\n\r\n```css\r\n@media print {\r\n\r\n}\r\n```\r\n\r\nBenim ihtiyacım ise barkod yazdırmaktı. Ancak barkodlar birden fazla olabiliyordu ve 10cm x 10cm formatında olmalıydı. Ve her 10cm bir sayfa şeklinde basılmalıydı. İlk olarak şöyle bir html yapım olduğunu varsayın:\r\n\r\n```html\r\n<div class="barcode">\r\n    ..\r\n</div>\r\n\r\n<div class="barcode">\r\n    ..\r\n</div>\r\n\r\n<div class="barcode">\r\n    ..\r\n</div>\r\n\r\n<div class="barcode">\r\n    ..\r\n</div>\r\n\r\n<div class="barcode">\r\n    ..\r\n</div>\r\n\r\n<div class="barcode">\r\n    ..\r\n</div>\r\n\r\n<div class="barcode">\r\n    ..\r\n</div>\r\n\r\n<div class="barcode">\r\n    ..\r\n</div>\r\n```\r\n\r\nve şöyle basit bir css kodum vardı:\r\n\r\n```css\r\n.barcode {\r\n    width: 10cm;\r\n    height: 10cm;\r\n    box-sizing: border-box;\r\n    border: 1px solid black;\r\n}\r\n```\r\n\r\nÇıktı almak istediğimde ise sonuç pek mutluluk verici değildi.\r\n\r\n![](https://raw.githubusercontent.com/tayfunerbilen/tayfun.net/main/images/Ekran%20Resmi%202023-01-03%2020.03.03.png)\r\n\r\nYapmam gereken ilk şey her barkodu ayrı bir sayfa olarak ayarlamaktı. Bu yüzden şöyle bir kod ekledim:\r\n\r\n```css\r\n.barcode {\r\n    ....\r\n    page-break-before: always;\r\n}\r\n```\r\n\r\nİlk sorunu çözmüş gibi görünüyoruz.\r\n\r\n![](https://raw.githubusercontent.com/tayfunerbilen/tayfun.net/main/images/Ekran%20Resmi%202023-01-03%2020.06.02.png)\r\n\r\nSıra geldi her sayfanın boyunu 10cm olarak ayarlamaya. Onun içinde şöyle bir kod yazdım:\r\n\r\n```css\r\n@media print {\r\n    @page  {\r\n        size: 10cm;\r\n        margin: 0;\r\n    }\r\n    html, body {\r\n        margin: 0;\r\n    }\r\n}\r\n```\r\n\r\nSonuç tam da istediğim gibiydi :)\r\n\r\n![](https://raw.githubusercontent.com/tayfunerbilen/tayfun.net/main/images/Ekran%20Resmi%202023-01-03%2020.07.51.png)\r\n\r\nİşin özü, print işlemleri yaparken bir çok teknik var ve ben de ihtiyacım olduğu için size birkaç tanesini anlatma şansı buldum. Umarım print işlemlerinde her şey yolunda gidiyordur, sevgiler :)',
    blog_active: "1",
    blog_category: ["css", "print"],
    blog_date: "2023-01-03 17:09:53",
    blog_hit: "0",
    blog_user_id: "1",
  },
  {
    blog_id: "19",
    blog_title: "Global Youtube Kanalını Büyütmek",
    blog_slug: "global-youtube-kanalini-buyutmek",
    blog_content:
      "10 yıl önce prototurk'un şu an ki kanalını açmıştım youtube'da. 10 yılda ne yazık ki 67k aboneye kadar gelebildik, aslında işin hitap ettiği kitleye bakınca fena bir başarı gibi sayılmıyor ancak aynı işi yapıp ingilizce konuşan kanalların çok daha hızlı yükselmesi bir tık can sıkıcı geliyordu :)\r\n\r\nÇok iyi derece akıcı ingilizce konuşamadığım için ingilizce içerik üretmekte şimdilik çok mantıklı gelmedi bana, kendi gelişimime vakit ayırırken youtube'da globale oynayacak bir kanal açmak istiyordum. Ne yapabilirim diye düşünürken ASMR programlama ile ilgili içerik üretenlere denk geldim, bir tane popüler bir türk arkadaşta var servet adında, baktım konsept güzel, baktım her kitleye hitap edebilir sonuçta konuşma yok, kodlar global, kitle de global olabilir.\r\n\r\nBir youtube kanalı açarak başladım işe. 14 aralık 2022'de kanalı açtım. İlk videomu da yine o gün yükledim.\r\n\r\nSonra 2-3 gün aralıklarla video atmaya başladım, şu an 8 video var kanalda toplamda.\r\n\r\nEk hiçbir şey yapmadım, etiketleri iyi ayarladım, başlıkları ilgi çekici konulardan seçmeye çalıştım, sadece ASMR videosu çekeceğim için klavye satın aldım, iyi bir mikrofon aldım ASMR'a uygun olacak şekilde. Yani yalan yok bi 10-15k arası yatırım yaptım. Bu iş başarısız bile olsa aldığım ekipmanları her türlü değerlendirebilirim ama amacım bunu başarılı hale getirmek :)\r\n\r\nİlk birkaç gün hiç abone ve beğeni gelmedi, sonra bir anda yavaş yavaş gelmeye başladı.\r\n\r\n![](https://raw.githubusercontent.com/tayfunerbilen/tayfun.net/main/images/Ekran%20Resmi%202022-12-26%2015.43.12.png)\r\n\r\nİzlenmelerde yavaş yavşa artmaya başladı, 12 günlük bir kanala göre şu an 19 abone ve 589 görüntülenme var. Yavaş yavaş insanlar videoları beğenmeye ve yorum yazmaya da başladılar.\r\n\r\nBu süreçte tüm videoların başlık ve açıklamalarını türkçe ve rusçayada çevirerek ekledim. Gelen aboneler rusyadan ağırlıklı olunca bu çeviriler işe yarıyor gibi düşünerek japonca ve hintçe çevirilerini de ekledim. Şimdi bunları gözlemledikçe gelişmeleri size de buradan bildireceğim :)\r\n\r\nYeni bir kanal büyütmek zor olsa da şimdilik keyifli, sabah uyanıp kaç abone geldi diye bakmak, yorum var mı diye bakmak, bir video tuttuktan sonra kitlenin hızla büyüyeceğini de düşünürsek  başarıları anlatacağım yazı çok yakında gelebilir, ya da belki de başarısızlıklarımdan ders çıkardığım bir yazıyla da karşınıza gelebilirim.\r\n\r\nŞimdilik, bekleyip göreceğiz!",
    blog_active: "1",
    blog_category: ["youtube", "asmr"],
    blog_date: "2022-12-26 12:46:34",
    blog_hit: "0",
    blog_user_id: "1",
  },
  {
    blog_id: "18",
    blog_title: "Scroll Alanların Akıcılığını Artırmak",
    blog_slug: "scroll-alanlarin-akiciligini-artirmak",
    blog_content:
      "CSS'de overflow ile taşanları scroll ile kaydırılabilir alan yaptığımızda, mobil cihazlardan test ederseniz kayış akıcılığı ortadan kalkıyor, body'nin kendi scroll'u olmadığı sürece yani siz bir div etiketine scroll işlemi uyguladığınızda aşağıdaki gibi akıcı olmayan bir scroll işlemi uygulanıyor.\r\n\r\n![](https://raw.githubusercontent.com/tayfunerbilen/tayfun.net/main/scroll-no-momentum.gif)\r\n\r\nBunun basit bir çözümü var, `overflow` verdiğiniz etikete şu özelliği eklerseniz:\r\n\r\n```css\r\n.etiket {\r\n\t-webkit-overflow-scrolling: touch;\r\n}\r\n```\r\n\r\nAşağıdaki gibi akıcı bir scroll işleviniz olacaktır.\r\n\r\n![](https://raw.githubusercontent.com/tayfunerbilen/tayfun.net/main/scroll-momentum.gif)\r\n\r\n**Not:** Gif boyutu biraz büyük, yüklenmesi zaman alabilir.",
    blog_active: "1",
    blog_category: ["css"],
    blog_date: "2022-12-13 16:53:41",
    blog_hit: "0",
    blog_user_id: "1",
  },
  {
    blog_id: "17",
    blog_title: "Tailwind Flex Gap Sorunu (iPhone)",
    blog_slug: "tailwind-flex-gap-sorunu-iphone",
    blog_content:
      'Aslında sorun CSS\'de `flex` ile `gap` özelliğini bir arada kullanmakta. Ancak hatayı tailwind ile alınca öyle araştırdığım için çözümünü ben de tailwind\'e özel paylaşacağım için bu şekilde bir başlık koymalıyım diye düşündüm :)\r\n\r\nTailwind\'de flex kullanıyorken öğeler arası mesafeyi ayarlamak için `gap` kullanıyorsanız, mobilde bu boşlukların uygulanmadığını farketmiş olabilirsiniz, peki ne yapmak gerekiyor?\r\n\r\n`gap` yerine `space` classlarını kullanmalıyız. Örneğin aşağıdaki örnekte `gap-x-4` uyguladığım elemanın mobilde görünümü şöyleydi:\r\n\r\n![](https://raw.githubusercontent.com/tayfunerbilen/tayfun.net/main/IMG_7873.jpg)\r\n\r\nbunu `space-x-4` e çektiğimde ise sonuç başarılı:\r\n\r\n![](https://raw.githubusercontent.com/tayfunerbilen/tayfun.net/main/IMG_7874.jpg)\r\n\r\nYani işin özü `gap` gördüğünüz yerleri `space` ile değiştirmeniz yeterli.\r\n\r\nAncak dikkat edilmesi gereken bir yer daha var, eğer şöyle bir yapınız varsa:\r\n\r\n```html\r\n<div className="flex items-center gap-x-4">\r\n\t<img src="./no-picture.png" alt=""/>\r\n\tTayfun Erbilen\r\n</div>\r\n```\r\n\r\nBunu `space-x-4` yapsanız bile işe yaramayacak, çünkü `Tayfun Erbilen` değeri de bir etiket içinde olmalı. `space` class\'ı aslında iç boşluk (padding) verdiği için bir öğeye ihtiyaç duyuyor. Yani şöyle yaparsanız:\r\n\r\n```html\r\n<div className="flex items-center space-x-4">\r\n\t<img src="./no-picture.png" alt=""/>\r\n\t<span>Tayfun Erbilen</span>\r\n</div>\r\n```\r\n\r\nprobleminiz kalmayacaktır.',
    blog_active: "1",
    blog_category: ["tailwind"],
    blog_date: "2022-12-13 11:09:58",
    blog_hit: "0",
    blog_user_id: "1",
  },
  {
    blog_id: "16",
    blog_title: "php-fpm php.ini yenileme",
    blog_slug: "php-fpm-php-ini-yenileme",
    blog_content:
      "Bugun basima gelen bir olayi bir dahaki sefere problem olmamasi icin yazmak istedim.\r\n\r\nBu blogtaki LAMP stack'i kurdugum makaledeki gibi sunucumu kurdum, daha sonra php.ini dosyasinda dosya yukleme boyutunu degistirip apache yi restartladim ancak php.ini degisiklikleri bir turlu yansimadi.\r\n\r\nCunku ben mod_php degilde php-fpm kullaniyordum o yuzden apache'yi restartlamak yerine aslinda php-fpm i restartlamam gerekiyordu, onu da su komutu calistirarak yaptim.\r\n\r\n```\r\nsudo systemctl restart php-fpm.service\r\n```\r\n\r\nVe bu sekilde degisilikleri algiladi isim cozuldu, eminim bir ara sizinde boyle bir probleminiz oldugunda isinize yarayacaktir.",
    blog_active: "1",
    blog_category: ["php"],
    blog_date: "2022-12-10 23:04:08",
    blog_hit: "0",
    blog_user_id: "1",
  },
  {
    blog_id: "15",
    blog_title: "ASMR Programlama",
    blog_slug: "asmr-programlama",
    blog_content:
      "Son zamanlarda ASMR programming adı altında paylaşılan içerikler benim de oldukça hoşuma gitti. Ve hal böyle olunca, prototurk'de hazırladığım kodlama videolarından bağımsız bir kanalda ASMR Programming videoları çekmeye karar verdim :)\r\n\r\nBu süreçte aldığım alet edavatları sizlerle de paylaşmak istiyorum, belki fikir edinmiş olursunuz düşünüyorsanız.\r\n\r\n## Mikrofon\r\n\r\n![Zoom h6 Mikrofon Görseli](https://m.media-amazon.com/images/I/71XOL3pPs8L._AC_SL1498_.jpg)\r\n\r\nBunu çok araştırdım açıkçası, bana en mantıklısı nedense hem bütçeme daha uygun hem de kaliteli olduğu için `Zoom H6` geldi. Youtube'da bir çok review videosunu izledim, ihtiyacımı karşılayacak gibi, daha detaylısını cihazlar elime ulaştığında daha detaylı paylaşırım.\r\n\r\n**Ürün linki:** [https://www.amazon.com.tr/gp/product/B00E0HAQOE/ref=ppx_yo_dt_b_asin_image_o01_s00?ie=UTF8&psc=1](https://www.amazon.com.tr/gp/product/B00E0HAQOE/ref=ppx_yo_dt_b_asin_image_o01_s00?ie=UTF8&psc=1)\r\n\r\n## Klavye\r\n\r\nSanırım asıl önemli olanda klavye, ben şimdilik 2 farklı klavye aldım. Bunlardan ilki:\r\n\r\n### NuPhy Halo65 (Kablosuz)\r\n\r\n![NuPhy Halo65 Klavye Görseli](https://i.shgcdn.com/ac098641-1820-4242-82a1-027ae73fc5d3/-/format/auto/-/preview/3000x3000/-/quality/lighter/)\r\n\r\nYurt dışında sipariş vermek zorunda kaldım bu klavyeyi, ancak görünüş o kadar estetik ki. Ses testlerini de dinlediğimde çok başarılı buldum, geldiğinde daha detaylı inceleyip sizleri bilgilendiririm.\r\n\r\n**Ürün linki:** [https://nuphy.com/products/halo65](https://nuphy.com/products/halo65)\r\n\r\n## Keychron K6 - Red Switch\r\n\r\n![Keychron K6 Klavye Görseli](https://cdn.shopify.com/s/files/1/0059/0630/1017/t/5/assets/keychronk6wirelessmechanicalkeyboard3-1646815621027.jpg?v=1646815636)\r\n\r\nSanırım bu klavyede bir hata yaptım, red switch yerine brown switch daha iyi olabilirdi, ama geldiğinde bunu da test edeceğim, eğer mikrofon göründüğü kadar başarılıysa tatmin edici bir ses çıkaracağına inanmak istiyorum, çünkü ürünü iade edemiyorum doğru sesi vermek zorunda 🤣\r\n\r\n**Ürün linki:** [https://www.hepsiburada.com/keychron-k6-65-kablosuz-mekanik-oyuncu-klavyesi-white-backlight-bluetooth-5-1-gateron-red-switch-p-HBCV000004YON3?magaza=ConnectGame](https://www.hepsiburada.com/keychron-k6-65-kablosuz-mekanik-oyuncu-klavyesi-white-backlight-bluetooth-5-1-gateron-red-switch-p-HBCV000004YON3?magaza=ConnectGame)\r\n\r\nBakalım çıktığım bu yolda başarılı olabilecek miyim :) Prototurk kanalını 100 bin abone yapmak için çok uğraşıyorum, eğer bu kanalı daha hızlı 100 bin yaparsam gerçekten bir şeyleri sorgulamaya başlayacağım :/",
    blog_active: "1",
    blog_category: ["asmr"],
    blog_date: "2022-12-09 00:07:29",
    blog_hit: "0",
    blog_user_id: "1",
  },
  {
    blog_id: "14",
    blog_title: "Centos 9 LAMP Stack Kurulumu",
    blog_slug: "centos-9-lamp-stack-kurulumu",
    blog_content:
      "LAMP yani Linux, Apache, Mysql/Mariadb ve PHP. Eğer bir php projeleriniz için sunucu kurmak istiyorsanız, bu makalede sizlere sırasıyla:\r\n\r\n- Apache\r\n- MariaDB (MySQL)\r\n- PHP 8\r\n- phpMyAdmin\r\n\r\nkurulumlarını göstereceğim.\r\n\r\nBaşlamadan önce, ben sunucularımı https://digitalocean.com üzerinden alıyorum. Kayıt olduktan sonra kartınızı tanımlayıp panele giriş yapın. Sağ üstten `Create > Droplets` diyerek ilgili sayfaya girin. Ve lokasyon olarak istediğiniz bir lokasyonu seçin, işletim sistemi olarak Centos 9'u seçin, kendinize uygun paketi seçin (şu an için min. aylık 7$) ve root şifrenizi belirleyip kurulumu gerçekleştirin.\r\n\r\nSunucu kurulduktan sonra ip adresini göreceksiniz. Bu ip adresi ile ssh'e şöyle bağlanabilirsiniz:\r\n\r\n```sh\r\nssh root@IP_ADRES\r\n```\r\n\r\nSonrada belirlediğiniz root şifresini girip bağlanıyorsunuz. Artık ssh'a bağlandıysanız, ki bu bir terminal yardımıyla olacak. Windows kullananlar putty uygulamasına bakabilir,o taraftaki en güncel client hangisi bilemiyorum. Mac kullananlar, terminal uygulamasını açıp bağlantıyı gerçekleştirdikten sonra aşağıdaki adımları izleyebilir.\r\n\r\n## Apache Kurulumu\r\n\r\nİlk olarak paketleri güncelleyelim.\r\n\r\n```\r\ndnf update\r\n```\r\n\r\nApache kurulumu için şu komutu çalıştıralım:\r\n\r\n```\r\ndnf install httpd httpd-tools \r\n```\r\n\r\nHer şey okeyse, sırasıyla aktif edelim, başlatalım.\r\n\r\n```\r\nsystemctl enable httpd\r\nsystemctl start httpd\r\n```\r\n\r\nDurumuna bakmak içinde şu komutu kullanabilirsiniz:\r\n\r\n```\r\nsystemctl status httpd\r\n```\r\n\r\n`http` ve `https` ayarları için şu paketi kuralım.\r\n\r\n```\r\ndnf install firewalld\r\n```\r\n\r\nVe şu şekilde başlatalım.\r\n\r\n```\r\nsudo systemctl start firewalld\r\n```\r\n\r\nVe `http` ve `https` ayarlarını açalım.\r\n\r\n```\r\nfirewall-cmd --permanent --zone=public --add-service=http\r\nfirewall-cmd --permanent --zone=public --add-service=https\r\nfirewall-cmd --reload\r\n```\r\n\r\nApache kuruldu, kontrol etmek için ip adresinizle giriş yapıp bakın:\r\n\r\n```\r\nhttp://IP_ADRES\r\n```\r\n\r\n## MariaDB (MySQL) Kurulumu\r\n\r\nKurulum için şu komutu çalıştıralım.\r\n\r\n```\r\ndnf install mariadb-server mariadb -y\r\n```\r\n\r\nKurulduktan sonra aktif edip başlatalım.\r\n\r\n```\r\nsystemctl start mariadb\r\nsystemctl enable mariadb\r\n```\r\n\r\nDurumunu kontrol etmek için:\r\n\r\n```\r\nsystemctl status mariadb\r\n```\r\n\r\nArtık MariaDB'yi daha güvenli hale getirmek için şu komutu çalıştırın:\r\n\r\n```\r\nmysql_secure_installation\r\n```\r\n\r\nMevcut root şifrenizi girdikten sonra yeni bir şifre belirleyin ve geri kalan tüm sorulara [y] olarak işaretleyip devam edin.\r\n\r\nKurulumun doğru olduğundan emin olmak için mysql'e bağlanıp test edelim.\r\n\r\n```\r\nmysql -e \"SHOW DATABASES;\" -p\r\n```\r\n\r\nKomutu çalıştırınca bir önceki adımda belirlediğiniz şifreyi isteyecek, girin ve enter'a basın. Eğer sorgu size bir değer döndürdüyse tamamdır bu iş.\r\n\r\n## PHP 8 Kurulumu\r\n\r\nKurulum için şu komutu çalıştırın:\r\n\r\n```\r\ndnf install php php-mysqlnd php-pdo php-gd php-mbstring\r\n```\r\n\r\napache'yi php'den haberdar etmek için yeniden başlatalım.\r\n\r\n```\r\nsystemctl restart httpd \r\n```\r\n\r\nArtık test etmek için `/var/www/html` altına girip bir `index.php` dosyası oluşturun ve içine bir php kodu yazıp test edin.\r\n\r\n## phpMyAdmin Kurulumu\r\n\r\nÖncelikle EPEL'i yükleyelim.\r\n\r\n```\r\ndnf config-manager --set-enabled crb\r\ndnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm\r\ndnf install https://dl.fedoraproject.org/pub/epel/epel-next-release-latest-9.noarch.rpm\r\n```\r\n\r\nşimdide phpMyAdmin'i yükleyelim.\r\n\r\n```\r\ndnf install phpmyadmin\r\n```\r\n\r\nphpMyAdmin'in ayarlarını okuması için apache'yi yeniden başlatalım.\r\n\r\n```\r\nsystemctl restart httpd\r\n```\r\n\r\nşimdi config dosyasında bir düzenleme yapmak lazım. şu komutu çalıştırın:\r\n\r\n```\r\nnano /etc/httpd/conf.d/phpMyAdmin.conf\r\n```\r\n\r\nNot: eğer nano hata verirse `dnf install nano` diyerek paketi kurup tekrar deneyin.\r\n\r\nAçılan dosyada `Require local` kısımlarını `Require all granted` olarak belirleyin ve CTRL + X'e basıp Y tuşuna basın enter'a basıp kaydedin.\r\n\r\napache'yi yeniden başlatın:\r\n\r\n```\r\nsystemctl restart httpd\r\n```\r\n\r\nHazırsınız! Erişmek için:\r\n\r\n```\r\nhttp://IP_ADRES/phpmyadmin\r\n```\r\n\r\n## .htaccess Ayarı\r\n\r\n`.htaccess` dosyasını çalışmıyorsa, şu ayarı yapın:\r\n\r\n```\r\nnano /etc/httpd/conf/httpd.conf\r\n```\r\n\r\naçılan dosyada `Override` değerini şöyle değiştirin:\r\n\r\n```\r\n. . .\r\n # \r\n # AllowOverride controls what directives may be placed in .htaccess files.\r\n # It can be \"All\", \"None\", or any combination of the keywords:\r\n # Options FileInfo AuthConfig Limit\r\n #\r\n AllowOverride All\r\n. . .\r\n```\r\n\r\nVe apache'yi yeniden başlatıyoruz, tamamız!\r\n\r\n```\r\nsystemctl restart httpd\r\n```\r\n\r\n## Yazma İzinleri (CHMOD)\r\n\r\nDosya yazma izinleriyle ilgili sorun yaşarsanız şu komutu çalıştırın:\r\n\r\n```\r\nchcon -R -t httpd_sys_rw_content_t /var/www\r\n```\r\n\r\n## Cloudflare Ayarları\r\n\r\nCloudflare.com’a girip kayıt olun. Daha sonra sağ üstten add site diyerek sitenin adresini yazıp start scan butonuna basıp 40 saniye bekleyin. İşlem tamamlandıktan sonra gelen yerde 2 tane A recordu girmeniz gerek bunlar aşağıdaki gibi;\r\n\r\nA —- siteadi.com —- sunucu ip adresi\r\nA —- www —- sunucu ip adresi\r\n\r\nBunları girip next deyince ödeme kısmı gelir, free deyip sonraki adıma geçin. O adımda size 2 tane nameserver verecek. Bunları alıp domaini aldığınız siteye girin, domaini düzenleye tıklayıp ns’leri bu 2 ns ile değiştirin.\r\n\r\nhttp://intodns.com/siteadi.com buradan kontrol edin, değiştiğinde cloudflare üzerinden verify yapın o kısım yeşil olunca cloudflare ayarlarıda tamam demektir. Artık domain adını yazarak sunucunuza bağlanabilirsiniz ????",
    blog_active: "1",
    blog_category: ["centos", "lamp-stack"],
    blog_date: "2022-12-08 00:07:05",
    blog_hit: "0",
    blog_user_id: "1",
  },
  {
    blog_id: "12",
    blog_title: "React Excel Export",
    blog_slug: "react-excel-export",
    blog_content:
      "React ile bir array'i excel olarak export etmek isterseniz şu adımları izleyebilirsiniz:\r\n\r\n1. Şu iki paketi kurun.\r\n\r\n```bash\r\nnpm i file-saver sheetjs-style\r\n```\r\n\r\n2. Export işlemi için şöyle bir component oluşturun:\r\n\r\n```js\r\nexport default function ExcelExport({excelData, fileName}) {\r\n\r\n\tconst fileType = 'application/vdn.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8'\r\n\tconst fileExtension = '.xlsx'\r\n\tconst [loading, setLoading] = useState(false)\r\n\r\n\tconst exportToExcel = async () => {\r\n\t\tconst ws = XLSX.utils.json_to_sheet(excelData)\r\n\t\tconst wb = {\r\n\t\t\tSheets: {data: ws,},\r\n\t\t\tSheetNames: ['data']\r\n\t\t}\r\n\t\tconst excelBuffer = XLSX.write(wb, {\r\n\t\t\tbookType: 'xlsx',\r\n\t\t\ttype: 'array'\r\n\t\t})\r\n\t\tconst data = new Blob([excelBuffer], {\r\n\t\t\ttype: fileType\r\n\t\t})\r\n\t\tFileSaver.saveAs(data, fileName + fileExtension)\r\n\t}\r\n\treturn (\r\n\t\t<button onClick={exportToExcel}>\r\n\t\t\tExcel İndir\r\n\t\t</button>\r\n\t)\r\n}\r\n```\r\n\r\n4. Export etmek istediğiniz datayı formatlayıp şu şekilde componenti kullanın.\r\n\r\n```js\r\n// fonksiyonu nereye koyduysanız oradan çağırın\r\nimport ExcelExport from \"./excel-export\"\r\n\r\nexport default function App() {\r\n\tconst data = [\r\n\t\t{\r\n\t\t\tname: 'Tayfun',\r\n\t\t\tsurname: 'Erbilen',\r\n\t\t\tage: 29\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'Ahmet',\r\n\t\t\tsurname: 'Günal',\r\n\t\t\tage: 24\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'Mehmet',\r\n\t\t\tsurname: 'Seven',\r\n\t\t\tage: 29\r\n\t\t}\r\n\t]\r\n\treturn (\r\n\t\t<ExcelExport excelData={data} fileName=\"dosya adi\" />\r\n\t)\r\n}\r\n```\r\n\r\nBiraz paketleri kurcalayarak stil işlemleri ve bazı advanced kullanımlarıda hızlıca kavrayabilirsiniz :) En azından\r\nartık xlsx formatında bir dosyanız ve geçerli bir formatınız var. Bundan sonrasını sizin hayal gücü ve araştırmanıza\r\nbırakıyorum.",
    blog_active: "1",
    blog_category: ["react", "excel"],
    blog_date: "2022-11-23 12:18:11",
    blog_hit: "0",
    blog_user_id: "1",
  },
  {
    blog_id: "11",
    blog_title: "Evlendim",
    blog_slug: "evlendim",
    blog_content:
      "Evet, aslında evleneli bu yazıyı paylaştığım tarihi baz alırsak 12 gün oldu. 15 Ekim 2022'de dünya evine girmiş bulunuyorum.\r\n\r\n20 yıl önce 3. sınıfta tanıştığım canım eşimle hayatlarımız inişli çıkışlı devam etti, belki 10 yıl önce evli bir adam olabilirdim ama kısmet bugüneymiş.\r\n\r\nNihayetinde 20 yıllık özlememizi sona erdirdik ve evlendik, nasıl mutluyum yazarak anlatamam 😂\r\n\r\nEvlenmeden önce evli bir çok kişiden aman evlenme, aman şöyle, aman böyle dediklerini duydum. Zaten bu kafadaysanız evlenmeyin, yazık. Evliliğinize yazık, geçen zamanınıza yazık, doğacak çocuğunuza yazık.\r\n\r\nBen onların aksine, sevdiğinizle doğru zamanda doğru koşullarda evlenin diyenlerdenim.\r\n\r\nÇünkü bu devirde evlenmek gerçekten çokta mantıklı bir karar değil, özellikle asgari ücretle yaşamını sürdürenleri merak ediyorum zira ben asgari ücretin üstünde iyi kazanan bir geliştirici olarak altından zor kalktım bu sürecin. Daha düşük maaşla gerçekten bir birikim olmadan şu günlerde evlenmenin çok zor olduğunu düşünüyorum.\r\n\r\nBelki de benim hiç birikmişim olmadığı için bana zor geldi, zamanında benden daha akıllı olup birikimini yapan birisi için zor olmayabilir diyeceğim ama yinede birkaç sene önce 4-5 bin tl'ye aldığınız buzdolabını bu yıl 15-20 bin tl'ye almak zorunda kaldığınızda ne demek istediğimi anlayacaksınız :)\r\n\r\nİşin maddi boyutunu bir şekilde aştıktan sonra, bir de bu süreçi yönetme olayı var. Anlayışlı bir eş ve ailesi varsa benimki gibi, her şey yolunda gidecektir. Umarım sizin eşiniz ve ailesi de anlayışlı ve makul insanlardır. Diğer türlü zaten evlenmeyin, size zora sokacak koşulları sırf adet adı altında dayatıyorlarsa batsın öyle adetde adaletde!\r\n\r\nŞaka bir yana, maddi olarak cebinizde en az 200 bin tl paranız yoksa gerçekten tekrar düşünün, çünkü bu süreçte aileleri bu işe dahil etmek yapacağınız son hata olur zira evlenmeden her şey bitedebilir. Benim gibi kimseyi bu işe karıştırmadan kendi kendinize yapabilirseniz her şey çok daha güzel gider. Ama tekrar söylüyorum bu süreçte anlayışlı bir eşiniz olmalı ve ailesi de bir o kadar anlayışlı olmalı. Tabi işin içine girmeden bunları anlamak biraz zor, o yüzden size başarılar çünkü ben bu sınavı geçtim :D\r\n\r\n2 haftalık bir evli olarak hayat çok güzel, 2 sene sonra da aynı şeyi söyleyeceğime eminim ama büyük konuşmayayım tabi. Yine de 2 sene sonra \"hala evliyim\" yazısı eklemişsem bilin ki hislerimde bir değişiklik yok ve sorun yoktur. Allah utandırmasın, hep böyle gitsin günler, yıllar..\r\n\r\nBuradan bu yazımı karım okuyorsa onu da çok sevdiğimi söylemeden geçemeyeceğimm, çünkü hanımcılık her zaman kazanır ❤️",
    blog_active: "1",
    blog_category: ["off-topic"],
    blog_date: "2022-10-27 12:17:42",
    blog_hit: "0",
    blog_user_id: "1",
  },
  {
    blog_id: "10",
    blog_title:
      '"You are running create-react-app 4.0.3 which is behind the latest release (5.0.1)" Hatası',
    blog_slug: "create-react-app-hatasi",
    blog_content:
      "Eğer `create-react-app` ile bir proje oluştururken böyle bir hata alıyorsanız, bilin ki sürümünüz eskimiş. Şöyle kurmak yerine;\r\n\r\n```shell\r\nnpx create-react-app .\r\n```\r\n\r\nsürüm belirterek kurarsanız güncel versiyonunu kurup işleme devam edecektir.\r\n\r\n```shell\r\nnpx create-react-app@5.0.1 .\r\n```\r\n\r\nbir sorunun daha üstesinden geldik :D",
    blog_active: "1",
    blog_category: ["create-react-app"],
    blog_date: "2022-08-16 12:17:24",
    blog_hit: "0",
    blog_user_id: "1",
  },
  {
    blog_id: "9",
    blog_title: "Şahıs Şirketi Açtım",
    blog_slug: "sahis-sirketi-actim",
    blog_content:
      "4 hafta önce react bootcamp'i vermeye başlamıştım. Geçen hafta sonu bitirdim ve fatura işini arkadaşımdan hallederim diye düşünüyordum ama onunda gelir vergisi oranı yüksek çıkınca iş başa düştü. Dedim en iyisi bir şahıs şirketi kurayım, 30 yaşını henüz doldurmadığım içinde genç şeysinden yararlanırım dedim.\r\n\r\nBu arada 30'a 6 ay kaldı, muhasebeci 6 ay faydalanırsın dedi ama vergi dairesinde önemli olan ne kadar kaldığı değil 30 yaşına gelmeden önce açılışı vermiş olman dedi, yani 3 sene faydalanabiliyormuşum bu da ek bir bilgi olsun benim gibi orta-yaşlılara :D\r\n\r\n2 gün önce muhasebeciye gidip açılışı verdim. Açılışta 750₺ gibi bir ücret ödedim, aylıkta muhasebeciye 250₺ gibi bir ücret ödeyecekmişim sanırım :D Ertesi gün vergi dairesine gidip online giriş bilgilerini aldım. Bugünde yine vergi dairesinde yoklama yaptırdım, adres olarak evi gösterdiğimiz için gelip kontrol ediyorlarmış ama gelen giden olmayınca ben kendim gidip hallettim.\r\n\r\nVe böylece bugün ilk faturamı da kesmiş oldum, e-arşiv gerçekten kullanılması çok rezil bir sistem ve hiçbir kullanıcı deneyimi sunmamakla birlikte kullanıcının işini zorlaştırmak için her türlü eziyet yapılmış. Bu sistemi yazan arkadaşları allah'a havale ediyorum, hiç mi kodlama yapmadınız be güzel kardeşim şu hayatta, torpille mi işe girdiniz naptınız?\r\n\r\nNeyse, inşallah güzel güzel faturalarımızı keser vergimizi öder normal bir vatandaş gibi davranmayı başarabiliriz, gelişmelerden sizi de haberdar ederim :D 2 ay sonra belki bi ofis açma planım var, onunla ilgilide bir yazı gelir, seviliyorsunu <3",
    blog_active: "1",
    blog_category: ["off-topic"],
    blog_date: "2022-06-30 12:17:06",
    blog_hit: "0",
    blog_user_id: "1",
  },
  {
    blog_id: "8",
    blog_title: "React ile Yazı Renklendirme",
    blog_slug: "react-ile-yazi-renklendirme",
    blog_content:
      'React\'de bazen bazı yazıları vurgulamak için farklı göstermeye ihtiyacınız olabilir. Örneğin içinde `javascript` geçen kelimeleri bulup onlara farklı bir stil işlemi uygulamak isteyebilirsiniz.\r\n\r\nBu gibi durumlarda en basit yöntem şu olabilir.\r\n\r\n```js\r\nexport default function App() {\r\n  const text = "lorem ipsum dollor amet.";\r\n  const highlight = "lorem";\r\n\r\n  return (\r\n    <div\r\n      dangerouslySetInnerHTML={{\r\n        __html: text.replaceAll(\r\n          new RegExp(`(${highlight})`, "gi"),\r\n          "<mark>$1</mark>"\r\n        )\r\n      }}\r\n    />\r\n  );\r\n}\r\n```\r\n\r\nAncak burada bir sorun var, bu vurgulanan eleman artık bir JSX elemanı olmaktan çıkıyor. Dolayısı ile JSX\'e uygulayabileceğiniz işlemleri buna uygulayamıyorsunuz.\r\n\r\nO yüzden bu yaklaşımı bir component mantığına çevirip şu şekilde uygularsanız artık JSX olarak istediğiniz işlemleri uygulayabilirsiniz.\r\n\r\n```js\r\nfunction HighlightText({ text, highlight }) {\r\n  let parts = text.split(new RegExp(`(${highlight})`, "gi"));\r\n  return parts.map((part) =>\r\n    part.toLocaleLowerCase("TR") === highlight.toLocaleLowerCase("TR") ? (\r\n      <mark>{part}</mark>\r\n    ) : (\r\n      part\r\n    )\r\n  );\r\n}\r\n\r\nexport default function App() {\r\n  const text = "lorem ipsum dollor amet.";\r\n  const highlight = "lorem";\r\n\r\n  return <HighlightText text={text} highlight={highlight} />;\r\n}\r\n```\r\n\r\nÖrneğin hashtag ile başlayan etiketleri vurgulamak isteseydiniz de şu şekilde yapmanız yeterli olacaktı.\r\n\r\n```js\r\nfunction HighlightTags({ children, delimiter = \'#\' }) {\r\n  let parts = children.split(new RegExp(`(${delimiter}[a-z]+)`, "gi"));\r\n  return parts.map((part) =>\r\n    part.includes(delimiter) ? (\r\n      <mark>{part}</mark>\r\n    ) : (\r\n      part\r\n    )\r\n  );\r\n}\r\n\r\nexport default function App() {\r\n  const text = "lorem @ipsum #dollor amet.";\r\n  return <HighlightTags>{text}</HighlightTags>;\r\n}\r\n```\r\n\r\nComponent\'e `delimiter` ile özel bir ayraç belirleyip onu da kullanabilirsiniz. Örneğin `#` yerine `@` ile başlayanları vurgulamak isteseydiniz:\r\n\r\n```js\r\nexport default function App() {\r\n  const text = "lorem @ipsum #dollor amet.";\r\n  return <HighlightTags delimiter="@">{text}</HighlightTags>;\r\n}\r\n```\r\n\r\nBu component\'i biraz daha gelişmiş yazabiliriz, çünkü bu şekilde JSX elemanı bile olsa component haricinde bir onclick işlemi vs. yapamıyoruz.\r\n\r\n```js\r\nfunction Highlight({\r\n  children,\r\n  text = "",\r\n  render,\r\n  startsWith = null,\r\n  match = "[a-z]+",\r\n  includes = null\r\n}) {\r\n  let parts = (text || children).split(\r\n    new RegExp(startsWith ? `(${startsWith}${match})` : `(${includes})`, "gi")\r\n  );\r\n  return parts.map((part) =>\r\n    (startsWith ? part.startsWith(startsWith) : part.includes(includes))\r\n      ? render(part)\r\n      : part\r\n  );\r\n}\r\n\r\nexport default function App() {\r\n  const clickTag = () => console.log("tag clicked");\r\n  return (\r\n    <>\r\n      <Highlight\r\n        text="bu yazı #tag örneği içerir."\r\n        startsWith="#"\r\n        render={(tag) => <mark onClick={clickTag}>{tag}</mark>}\r\n      />\r\n      <br />\r\n      <Highlight\r\n        text="bu yazı #türkçe tag örneği içerir."\r\n        startsWith="#"\r\n        match="[a-züçşğıİ]+"\r\n        render={(tag) => <mark onClick={clickTag}>{tag}</mark>}\r\n      />\r\n      <br />\r\n      <Highlight\r\n        text="bu yazı @mention ile ilgil örnek içerir."\r\n        startsWith="@"\r\n        render={(mention) => <mark>{mention}</mark>}\r\n      />\r\n      <br />\r\n      <Highlight\r\n        includes="highlight"\r\n        render={(text) => <mark>{text}</mark>}\r\n      >\r\n        Bu örnekte ise herhangi bir kelimeyi highlight edebiliriz. Ve highlight\r\n        edilen değerin kaç kere geçtiği önemsizdir.\r\n      </Highlight>\r\n    </>\r\n  );\r\n}\r\n```\r\n\r\nArtık kullanabileceğimiz 5 tane prom\'umuz var.\r\n\r\n- `render` - Vurgulanan elemanı render etmek için gerekli fonksiyonumuz. Burada istediğimiz etiket içinde yazdırabilir, onClick vs. gibi işlemler uygulayabiliriz.\r\n- `startsWith` - Vurgulanacak değer özel bir değer ile başlayacaksa bunu belirtebilirsiniz. Örneğin # ya da @ karakterleri ile başlayanı vurgulamak istediğinizde.\r\n- `includes` - Vurgulanacak değeri doğrudan belirleyip geçen yerleri vurgulatabilirsiniz.\r\n- `match` - Vurgulanacak değer özel bir değerle başlıyorsa ve devamında ekstra bir regex\'e ihtiyaç duyarsanız.\r\n- `render` - Vurgulanacak değeri render etmek için gerekli fonksiyon.',
    blog_active: "1",
    blog_category: ["react"],
    blog_date: "2022-06-06 12:16:46",
    blog_hit: "0",
    blog_user_id: "1",
  },
  {
    blog_id: "7",
    blog_title: "React Component Yapısı",
    blog_slug: "react-component-yapisi",
    blog_content:
      "Component yapısı sadece react'e özgü bir şey değil. Bütün javascript frameworklerinde bulunan bu yapı sayesinde, ihtiyacımız olan her şeyi component'lere bölerek yeniden kullanılabilir hale getirebilir ve tekrardan kod yazmayı engelleyebiliriz.\r\n\r\nBöylece yapıların tamamı component üzerine kurulduğunda, yönetmesi ve geliştirmesi de çok daha kolay bir hal alacaktır.\r\n\r\nAyrıca component'lere `prop` yani özellik geçerekte component'in nasıl davranacağını belirleyebiliriz. Böylece bir component birden fazla şekilde kullanılabilir. Ancak unutmayın ki, component'ler genel olarak tek bir amaca hizmet ederler.\r\n\r\nÖrneğin projenin bir UI kütüphanesini oluştururken, bu öğelerin her birini ayrı componentler olarak oluştururuz. Mesela `button` örneğini ele alalım.\r\n\r\nBir `Button` componentinin amacı, stile uygun olarak bir butonu göstermekten ibaret olmalıdır. `prop` yardımı ile en fazla butonunun şeklini değitirmeliyiz, ona ek özelliker atamak yerine fakrlı bir component'e bölerek geliştirme yapmak daha sağlıklı olacaktır.\r\n\r\nÖrneğin bir button'a bastığımızda altında bir dropdown açtırmak istediğimizde aslında burada iki farklı component'imiz var demektir. İlki az önce yukarıda da bahsettiğim `button` compoenenti, bir diğeri ise açılan kısım için hazırlayacağımız `dropdown` componenti.\r\n\r\nO halde gelin, yazının bundan sonraki aşamalarında bu iki component'i oluşturarak component yapısını ve propları öğrenelim.\r\n\r\n### Bir Component'in Yapısı\r\n\r\nReact'de bir component oluşturmak istediğinizde büyük harf ile başladığından emin olun. Zira react, büyük harfle başlayan fonksiyonları bir component gibi kabul edecektir. Bu yüzden bir fonksiyon oluşturmak istediğinizde bunu büyük harfle başlatmayın.\r\n\r\nGelin en basit bir react component'i nasıl oluşturulur görelim.\r\n\r\n```jsx\r\n// ./components/Button.js\r\n\r\nfunction Button() {\r\n  return (\r\n    <button>Buton</button>\r\n  )\r\n}\r\nexport default Button\r\n```\r\n\r\nYukarıda herhanhi bir prop'u olmayan, sabit bir buton component'i oluşturduk. Bu şekilde oluşturulan component'lerin pek bir anlamı yoktur, belki kodunuzu split etmek için kullanabilirsiniz ancak daha anlamlı bir component yapısı için bunu birazdan düzenleyeceğiz.\r\n\r\n### Component'in Prop'ları\r\n\r\n`prop`lar ya da özellikler bir fonksiyona gönderilen parametreler gibi düşünülebilir. Yukarıdaki oluşturduğumuz component'i çağırmak ve kullanmak istediğimizde şöyle bir yol uyguluyoruz.\r\n\r\n\r\n```jsx\r\n// ./App.js\r\nimport Button from \"./components/Button.js\"\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <h3>Component Yapısı</h3>\r\n      <Button />\r\n    </div>\r\n  )\r\n}\r\nexport default App\r\n```\r\n\r\nŞimdi bu component'in görevi buton oluşturmak olduğu için evvela buton'un içeriğini prop olarak göndermemiz gerekiyor. Hadi gelin, bunu şöyle değiştirelim.\r\n\r\n```jsx\r\n// ./App.js\r\nimport Button from \"./components/Button.js\"\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <h3>Component Yapısı</h3>\r\n      <Button text=\"Test Button\" />\r\n    </div>\r\n  )\r\n}\r\nexport default App\r\n```\r\n\r\nGördüğünüz gibi `anahtar=\"değer\"` mantığında proplarımızı component'e geçebiliriz. Ancak sonuç hala değişmeyecektir. Çünkü component'de bu gönderilen prop'ları alıp işlememiz gerekiyor.\r\n\r\nO zaman `./components/Button.js` dosyasını şöyle değiştirip tekrar test edelim.\r\n\r\n```jsx\r\n// ./components/Button.js\r\n\r\nfunction Button(props) {\r\n  return (\r\n    <button>{props.text}</button>\r\n  )\r\n}\r\nexport default Button\r\n```\r\n\r\nTekrar kontrol ettiğimizde artık gönderdiğimiz `text` prop'unun butonun içinde yazdığını görebiliriz. Elbette `props.text` diye ulaşmak yerine şöyle bir kullanımda mevcuttu.\r\n\r\n\r\n```jsx\r\n// ./components/Button.js\r\n\r\nfunction Button({ text }) {\r\n  return (\r\n    <button>{text}</button>\r\n  )\r\n}\r\nexport default Button\r\n```\r\n\r\n`props` bir obje olduğu için javascript'de destructuring ile bunu parçalayıp içindeki değeri doğrudan değişken olarak kullanabiliriz. Böylece biraz daha anlamlı bir component yapısı oluşturmuş oluruz.\r\n\r\nBir başka prop daha geçip onu da nasıl alacağımıza bakalım.\r\n\r\n```jsx\r\n// ./App.js\r\nimport Button from \"./components/Button.js\"\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <h3>Component Yapısı</h3>\r\n      <Button text=\"Test Button\" />\r\n      <Button text=\"Test Button\" variant=\"success\" />\r\n    </div>\r\n  )\r\n}\r\nexport default App\r\n```\r\n\r\nŞimdi `variant` prop'una göre buton'un stil işlemlerini yazabiliriz.\r\n\r\n```jsx\r\n// ./components/Button.js\r\n\r\nfunction Button({ text, variant = 'default' }) {\r\n  return (\r\n    <button className={variant}>{text}</button>\r\n  )\r\n}\r\nexport default Button\r\n```\r\n\r\nGördüğünüz gibi `variant = \"varsayılan değer\"` şeklinde eğer bu prop gönderilmemiş ise biz bir varsayılan değer tanımlayarak kullandık. Ve gelen `variant` değerini doğrudan button'un class'ı olarak tanımladık.\r\n\r\nBöylece css'de `button.default` ya da `button.success` ile ilgili bir stil yazdığımda doğrudan buna etki edecek ve variant'ı neyse button o şekilde gözükecektir.\r\n\r\nGelin bu stil işlemini `module css` kullanarak yapalım.\r\n\r\n```css\r\n// ./components/Button.module.css\r\n\r\n.default {\r\n  background: #eee;\r\n}\r\n.success {\r\n  background: green;\r\n  color: #fff;\r\n}\r\n```\r\n\r\nVe bu stilleri button component'ine uygulayalım.\r\n\r\n```jsx\r\n// ./components/Button.js\r\nimport styles from \"./Button.module.css\"\r\n\r\nfunction Button({ text, variant = 'default' }) {\r\n  return (\r\n    <button className={styles[variant]}>{text}</button>\r\n  )\r\n}\r\nexport default Button\r\n```\r\n\r\nArtık çıktıya baktığımızda farklı renklerde 2 button göreceğiz. Başarıyla basitte olsa component mantığını ve prop'ları öğrendiğimizi düşünüyorum.\r\n\r\n> Component'ler her zaman geriye bir şeyler döndürmek zorundadır, ancak her zaman prop almak zorunda değillerdir.\r\n\r\nSon olarak `prop` içerisinde `children` değerini göstermek istiyorum. Biz buton component'ini kullanırken şöyle kullanıyoruz.\r\n\r\n```jsx\r\n<Button text=\"Test Button\" variant=\"success\" />\r\n```\r\n\r\nAncak burada `text` propu yerine bu componenti etiket mantığnda tanımlayıp değeri şöyle gönderseydik ne olurdu?\r\n\r\n```jsx\r\n<Button variant=\"success\">\r\n  Test Button\r\n</Button>\r\n```\r\n\r\nNe yazık ki gönderilen değeri alamazdık. İşte bu yüzden component'i değiştirip `children` prop'unu kullanmamız gerekiyor.\r\n\r\n```jsx\r\n// ./components/Button.js\r\nimport styles from \"./Button.module.css\"\r\n\r\nfunction Button({ children, variant = 'default' }) {\r\n  return (\r\n    <button className={styles[variant]}>{children}</button>\r\n  )\r\n}\r\nexport default Button\r\n```\r\n\r\nArtık sonuç yine başarılı olacaktır. `children` her component'de `props` altında bulunur. Etiket gibi kullandığımızda içine ne yazarsak hepsi `children` içine dahil olacaktır.\r\n\r\nGönül isterdi ki react'de de vue ya da svelte'de olduğu gibi slot mantığı olsun, componentler çok daha iyi yönetilsin ancak şimdilik böyle bir özelliğimiz yok :)\r\n\r\nŞimdilik anlatacaklarım bu kadar, belki daha sonra makaleyi revize edebilirim. Hepinize iyi kodlamalar!",
    blog_active: "1",
    blog_category: ["react"],
    blog_date: "2022-05-23 12:16:26",
    blog_hit: "0",
    blog_user_id: "1",
  },
  {
    blog_id: "6",
    blog_title: "React useState() Kullanımı",
    blog_slug: "react-usestate-kullanimi",
    blog_content:
      "React'de state oluşturmak için bu hook'u kullanıyoruz. Bize dizi olarak iki değer dönüyor. İlki oluşturulan değeri tutan değişken, diğeri ise bu değeri güncellemek için gerekli fonksiyon.\r\n\r\nOluşturduğunuz state'leri doğrudan güncellemek yerine, ikinci değerde döndürdüğü fonksiyon yardımıyla güncellemeniz gerekiyor.\r\n\r\nAyrıca `useState()` içinde o state'in başlangıç değerini belirleyebilirsiniz. Bu başlangıç değeri string, nesne, dizi gibi veri türlerini içerebilir.\r\n\r\nKısaca react'de bir state oluşturmak şöyle:\r\n\r\n```jsx\r\nimport {useState} from \"react\"\r\n\r\nfunction App() {\r\n  const [name, setName] = useState('tayfun')\r\n  return (\r\n    <>\r\n      <h3>{name}</h3>\r\n      <button onClick={() => setName('ahmet')}></button>\r\n    </>\r\n  )\r\n}\r\n```\r\n\r\nAyrıca state'i güncellemek için kullanacağınız fonksiyon'a parametre olarak bir callback fonksiyonu tanımladığınızda bir önceki değerini alıp işlem yapabiliyorsunuz. Örneğin:\r\n\r\n```jsx\r\nimport {useState} from \"react\"\r\n\r\nfunction App() {\r\n  const [counter, setCounter] = useState(0)\r\n  return (\r\n    <>\r\n      <h3>Butona {counter} kez tıklandı.</h3>\r\n      <button onClick={() => setCounter(prevValue => prevValue += 1)}>Tıkla</button>\r\n    </>\r\n  )\r\n}\r\n```",
    blog_active: "1",
    blog_category: ["react", "react-hook"],
    blog_date: "2022-05-17 12:16:08",
    blog_hit: "0",
    blog_user_id: "1",
  },
  {
    blog_id: "5",
    blog_title: "React forwardRef() Kullanımı",
    blog_slug: "react-forwardref-kullanimi",
    blog_content:
      "React'de bir DOM elemanına ulaşmak için `useRef()` ile ref'lemek gerekiyor. Örneğin;\r\n\r\n```js\r\nimport { useRef } from \"react\"\r\n\r\nfunction App() {\r\n  const ref = useRef()\r\n  \r\n  return (\r\n    <>\r\n      <input type=\"text\" ref={ref} />\r\n      <button onClick={() => ref.current.focus()}>Input'a Focusla</button>\r\n    </>\r\n  )\r\n}\r\n```\r\n\r\nAncak bu senaryoda input etiketi bir React Component'i olsaydı, bu şekilde bir refleme çalışmayacaktı. İşte bu noktada devreye `forwardRef()` giriyor. Alt component'den üst component'e refi iletmemizi sağlıyor.\r\n\r\nŞimdi aynı örneği input'un component olduğu senaryoda yazalım.\r\n\r\n```js\r\nimport { useRef, forwardRef } from \"react\"\r\n\r\nconst Input = forwardRef((props, ref) => {\r\n  return (\r\n    <input {...props} ref={ref} />\r\n  )\r\n})\r\n\r\nfunction App() {\r\n\r\n  const ref = useRef()\r\n  \r\n  return (\r\n    <>\r\n      <Input type=\"text\" ref={ref} />\r\n      <button onClick={() => ref.current.focus()}>Input'a Focusla</button>\r\n    </>\r\n  )\r\n}\r\n```\r\n\r\nArtık `forwardRef()` ile ref'leri nasıl üst component'e ileteceğinizi biliyorsunuz. Tebrikler :)",
    blog_active: "1",
    blog_category: ["react"],
    blog_date: "2022-05-11 12:15:50",
    blog_hit: "0",
    blog_user_id: "1",
  },
  {
    blog_id: "4",
    blog_title: "React createElement() Kullanımı",
    blog_slug: "react-createelement-kullanimi",
    blog_content:
      'Bildiğiniz gibi react\'de html değil JSX yazıyoruz. Kullanımı kolay olması açısından neredeyse her şey html ile aynı. Tek önemli fark, etiketlerde `class` niteliği yerine `className` kullanıyoruz. Ya da örneğin `onclick` yerine `onClick` kullanıyoruz vs.\r\n\r\nJSX\'i başka bir yazıda inceleriz, şimdilik bu kadarını bilsek yeterli olur sanırım. Peki JSX gibi güzel bir nimet varken neden `createElement()` API\'si kullanılır? Aslında bunu bir örnekle açıklamak istiyorum.\r\n\r\nÖrneğin bir `Button` componentimiz olsun. Ve bu componentimiz bazı `prop` lar alsın. Nedir bunlar, örneğin `icon`, `iconPosition`, `size`, `theme` gibi bir butonda olabilecek temel özellikler.\r\n\r\n```js\r\n// ./components/Button.js\r\nfunction Button({ children, icon = false, iconPosition: \'left\', size = \'big\', theme = \'default\', ...props }) {\r\n  return (\r\n    <button className={classNames({\r\n      "flex items-center justify-center gap-x-1.5 text-center font-medium px-3 transition-colors rounded border shadow": true,\r\n      "h-9 text-sm": size === \'big\',\r\n      "h-7 text-xs": size === \'small\',\r\n      "bg-white text-black border-gray-200": theme === \'default\',\r\n      "bg-green-600 text-white border-green-800": theme === \'success\',\r\n      "bg-red-600 text-white border-red-800": theme === \'danger\',\r\n      "flex-row-reverse": iconPosition === \'right\'\r\n    })} {...props}>\r\n      {icon}\r\n      {children}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default Button\r\n```\r\n\r\nYukarıdaki component\'in çalışması için bazı bağımlılıklara ihtiyacımız var. Öncelikle ben `tailwind` kullandığım için class\'lı tanımlıyorum stil işlemlerini. Eğer daha doğru bir sonuç görmek isterseniz tailwind\'i kurmanız gerekiyor. Kendi sitesinde bununla ilgili bir [yönlendirme](https://tailwindcss.com/docs/guides/create-react-app) var, onu takip edebilirsiniz. Bunu da daha kolay yönetmek için `classnames` paketini kullanıyorum. Bu paketi kurmak için;\r\n\r\n```\r\nnpm install classnames\r\nyarn add classnames\r\n```\r\n\r\nArtık component\'i import edip denemeler yapabiliriz.\r\n\r\n```js\r\nimport Button from "./components/Button"\r\nimport {BiCheck} from "react-icons/bi"\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Button>Tayfun Erbilen</Button>\r\n      <Button size="small">Tayfun Erbilen</Button>\r\n      <Button theme="success" icon={<BiCheck size={16} />}>Başarılı</Button>\r\n      <Button theme="success" icon={<BiCheck size={16} />} iconPosition="right">Başarılı</Button>\r\n    <(>\r\n  )\r\n}\r\n```\r\n\r\n> **Not:** İkonlar için `react-icons` paketini kullanıyorum. Dilerseniz onu da şöyle kurabilirsiniz.\r\n> `npm install react-icons` ya da yarn kullanıyorsanız `yarn add react-icons`\r\n\r\nŞimdi gelelim sorumuza, biz bu component\'i `button` etiketi yerine `a` etiketi ile nasıl değiştiririz? Bazı yerlerde `button` bazı yerlerde `a` etiketine ihtiyacımız var? Hatta bazı yerlerde, `react-router-dom` paketinin `NavLink` componentiyle kullanmamız gerekiyor?\r\n\r\nİşte bu noktada, bu component\'i `createElement()` API ile oluşturarak daha fazla özelleştirme yapabiliriz. Hadi gelin, aynı component\'i tekrar `createElement()` ile yazalım.\r\n\r\nTemelde `createElement()` şu yapıdadır;\r\n\r\n```js\r\nimport { createElement } from "react"\r\n\r\nfunction Button() {\r\n  return createElement(\'button\', {\r\n    className: \'button\'\r\n  }, \'Ben Butonum\')\r\n}\r\n```\r\n\r\nYani 3 parametre alıyor, etiketin adı, prop\'lar ve text. Şimdi bunu bizim componentimize uyarlayalım.\r\n\r\n```js\r\n// ./components/Button.js\r\nimport { createElement } from "react"\r\n\r\nfunction Button({ children, as = \'button\', icon = false, iconPosition: \'left\', size = \'big\', theme = \'default\', ...props }) {\r\n  return createElement(as, {\r\n    className: classNames({\r\n      "flex items-center justify-center gap-x-1.5 text-center font-medium px-3 transition-colors rounded border shadow": true,\r\n      "h-9 text-sm": size === \'big\',\r\n      "h-7 text-xs": size === \'small\',\r\n      "bg-white text-black border-gray-200": theme === \'default\',\r\n      "bg-green-600 text-white border-green-800": theme === \'success\',\r\n      "bg-red-600 text-white border-red-800": theme === \'danger\',\r\n      "flex-row-reverse": iconPosition === \'right\'\r\n    }),\r\n    ...props\r\n  }, children)\r\n}\r\n\r\nexport default Button\r\n```\r\n\r\nArtık component\'e prop olarak `as` altında istediğimiz etiketi ya da component\'i belirterek component\'in nasıl render olacağına karar verebiliriz.\r\n\r\n```js\r\nimport Button from "./components/Button"\r\nimport {BiCheck} from "react-icons/bi"\r\nimport {NavLink} from "react-router-dom"\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Button>Tayfun Erbilen</Button>\r\n      <Button as="a" href="https://prototurk.com" target="_blank" size="small">Prototürk\'e Git</Button>\r\n      <Button as={NavLink} to="/" theme="success" icon={<BiCheck size={16} />}>Geri Dön</Button>\r\n    <(>\r\n  )\r\n}\r\n```',
    blog_active: "1",
    blog_category: ["react"],
    blog_date: "2022-05-10 12:15:28",
    blog_hit: "0",
    blog_user_id: "1",
  },
  {
    blog_id: "3",
    blog_title: "JavaScript ile ülke kodundan ülke bilgisi almak",
    blog_slug: "javascript-ile-ulke-kodundan-ulke-bilgisi-almak",
    blog_content:
      "Javascript'de `Intl` sınıfında bir çok işe yarar metod var, bunlardan bir tanesi bugün işime yaradı. Elimde ülke kodu mevcut bir dizi var ve bu ülke kodlarına hangi ülke ve hangi dil olduğunu göstermek istiyordum.\r\n\r\nBunun için `Intl` altındaki `DisplayNames()` metodunu kullandım. Örneğin;\r\n\r\n`en-TR`\r\n`ar-SY`\r\n`en-GB`\r\n`en-US`\r\n\r\ngibi değerler vardı elimde. Ve bunların karşılığında türkçe olarak değerlerini yazdırmak istedim. Bunları tek tek kontrol edip karşılıklarını yazdırabilirdim ama onun yerine `Intl` API'yi kullanarak çok daha efektik bir kod yazabildim, şöyle ki;\r\n\r\n```js\r\nconst getNameByCountryCode = name => new Intl.DisplayNames(\r\n  ['tr'], {\r\n    type: 'language'\r\n  }\r\n)\r\n\r\nconsole.log(getNameByCountryCode('en-TR')) // İngilizce (Türkiye)\t\r\nconsole.log(getNameByCountryCode('ar-SY')) // Arapça (Suriye)\t\r\nconsole.log(getNameByCountryCode('en-GB')) // İngiliz İngilizcesi\t\r\nconsole.log(getNameByCountryCode('en-US')) // Amerikan İngilizcesi\t\r\n```\r\n\r\nAyrıca `type` yerine `region`, `script` ya da `currency` yazarakta farklı sonuçlar alabilirdim.\r\nDaha detaylı bilgi için [buraya](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames) bakabilirsin.",
    blog_active: "1",
    blog_category: ["javascript"],
    blog_date: "2022-04-26 12:13:10",
    blog_hit: "0",
    blog_user_id: "1",
  },
  {
    blog_id: "2",
    blog_title: "Svelte Debounce Yaklaşımı",
    blog_slug: "svelte-debounce-yaklasimi",
    blog_content:
      "Svelte'de kullanıcıdan bilgi alırken girilen bilgiyi state'e aktarmak için `bind:value` diyerek doğrudan state'in güncellenmesini sağlıyoruz.\r\n\r\n```html\r\n<script>\r\nlet search = ''\r\n</script>\r\n\r\n<input type=\"text\" bind:value={search} /> <br />\r\nYazılan değer: {search}\r\n```\r\ndemo: [https://svelte.dev/repl/25d143f7c81645d3bce2fa3560c57418?version=3.47.0](https://svelte.dev/repl/25d143f7c81645d3bce2fa3560c57418?version=3.47.0)\r\n\r\nAncak bazı durumlarda kullanıcının her yazdığı harfi anında güncellemesini değilde yazdıktan 300-400ms sonra bu state'in güncellenmesini isteyebilirsin. Bu durumua `debounce` diyoruz.\r\n\r\nBunu yapmanın farklı yolları var, kendimiz yazabileceğimiz gibi mevcut bir paketide kullanabiliriz. Örneğin yukarıdakini kendimiz yazacak olsak şöyle yapmalıydık.\r\n\r\n\r\n```html\r\n<script>\r\nlet search = '', timeout\r\nconst searchHandle = e => {\r\n  clearTimeout(timeout)\r\n  timeout = setTimeout(() => search = e.target.value, 300)\r\n}\r\n</script>\r\n\r\n<input type=\"text\" vale={search} on:input={searchHandle} /> <br />\r\nYazılan değer: {search}\r\n```\r\ndemo: [https://svelte.dev/repl/5ba3c7b41e9d40b2a603a6ed50ab21aa?version=3.47.0](https://svelte.dev/repl/5ba3c7b41e9d40b2a603a6ed50ab21aa?version=3.47.0)\r\n\r\nya da benimde sıkça kullandığım [just-debounce-it](https://www.npmjs.com/package/just-debounce-it) paketini kullanarak yapabilirdik. Öncelikle paketimizi kuralım.\r\n\r\n```sh\r\n#npm için\r\nnpm -i just-debounce-it\r\n\r\n# yarn için\r\nyarn add just-debounce-it\r\n```\r\n\r\nArtık paketi import edip şöyle kullanabiliriz.\r\n\r\n```html\r\n<script>\r\nimport debounce from 'just-debounce-it';\r\n\r\nlet search = ''\r\nconst searchHandle = debounce(e => search = e.target.value, 300);\r\n</script>\r\n\r\n<input type=\"text\" vale={search} on:input={searchHandle} /> <br />\r\nYazılan değer: {search}\r\n```\r\ndemo: [https://svelte.dev/repl/17495840263348d39d9efe6e473b13ef?version=3.47.0](https://svelte.dev/repl/17495840263348d39d9efe6e473b13ef?version=3.47.0)\r\n\r\n> Bunu genelde autocomplete yaptığınız aramalarda ve performansı artırmak için kullanabilirsin.",
    blog_active: "1",
    blog_category: ["svelte"],
    blog_date: "2022-04-26 12:12:46",
    blog_hit: "0",
    blog_user_id: "1",
  },
  {
    blog_id: "1",
    blog_title: "HTML girdilerde kopyala-yapıştır işlemini engellemek",
    blog_slug: "html-girdilerde-kopyala-yapistir-islemini-engellemek",
    blog_content:
      'Kullanıcıdan bilgi almamız gereken durumlarda `<input />` ve `<textarea />` gibi form etiketlerini kullanıyoruz ve bazı durumlarda kullanıcıların bu etiketlere kopyala-yapıştır yapmasını engellemek isteyebilirsin.\r\n\r\nÖrneğin kredi kartının son 3 hanesinin girildiği bir senaryoda kullanıcının bunu doğrudan yapıştırmasını engellemek isteyebilirsin.\r\nYa da önemli bir veriyi normal kullanıcıların kopyalamayacağı şekilde ayarlamak isteyebilirsin. Normal kullanıcı diyorum çünkü geliştiriciler için ön tarafta yapılan önlemlerin çok bir önemi yok biliyorsun :)\r\n\r\nBu gibi durumlarda kopyalamayı engellemek için `oncopy`, yapıştırmayı engellemek için `onpaste` olaylarında işlem yapabilirsin.\r\n\r\nYapıştırmayı engellediğimiz bir örnek:\r\n\r\n```html\r\n<!--\r\n  bu input\'a kopyalanan bir içerik yapıştırılamaz.\r\n-->\r\n<input type="text" name="cvv" placeholder="CVV" onpaste="return false" />\r\n```\r\n\r\nKopyalamayı engellediğimiz bir örnek:\r\n\r\n```html\r\n<!--\r\n  bu input\'un içeriği kopyalanamaz.\r\n-->\r\n<input type="text" name="email" value="tayfun@erbilen.net" oncopy="return false" />\r\n```\r\n\r\nAyrıca her iki olayı aynı etikete koyarak kopyala-yapıştırı normal kullanıcılar için tamamen engellemiş oluruz.',
    blog_active: "1",
    blog_category: ["html"],
    blog_date: "2022-04-21 12:07:27",
    blog_hit: "0",
    blog_user_id: "1",
  },
];

export default BLOGS;
